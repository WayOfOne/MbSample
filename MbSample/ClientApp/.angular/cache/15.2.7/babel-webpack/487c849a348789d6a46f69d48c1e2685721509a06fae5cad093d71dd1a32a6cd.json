{"ast":null,"code":"import { LogLevel, HubConnectionBuilder } from '@microsoft/signalr';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/common\";\nfunction FetchDataComponent_p_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\")(1, \"em\");\n    i0.ɵɵtext(2, \"Loading...\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction FetchDataComponent_table_5_tr_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"td\");\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const forecast_r3 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(forecast_r3.date);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(forecast_r3.temperatureC);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(forecast_r3.temperatureF);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(forecast_r3.summary);\n  }\n}\nfunction FetchDataComponent_table_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"table\", 4)(1, \"thead\")(2, \"tr\")(3, \"th\");\n    i0.ɵɵtext(4, \"Date\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"th\");\n    i0.ɵɵtext(6, \"Temp. (C)\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"th\");\n    i0.ɵɵtext(8, \"Temp. (F)\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"th\");\n    i0.ɵɵtext(10, \"Summary\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(11, \"tbody\");\n    i0.ɵɵtemplate(12, FetchDataComponent_table_5_tr_12_Template, 9, 4, \"tr\", 5);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(12);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.forecasts);\n  }\n}\nexport class FetchDataComponent {\n  constructor(http, baseUrl) {\n    this.forecasts = [];\n    this.baseUrl = baseUrl;\n    this.http = http;\n    http.get(baseUrl + 'weatherforecast').subscribe(result => {\n      this.forecasts = result;\n    }, error => console.error(error));\n    this.hubConnection = new HubConnectionBuilder().withUrl(`https://localhost:7064/weatherhub`).configureLogging(LogLevel.Information).build();\n    this.hubConnection.start().then(() => {\n      console.log('Connection started');\n    }).catch(err => console.error('Error while starting connection: ' + err));\n    this.hubConnection.on('WeatherUpdated', data => {\n      console.log(\"Received new weather data:\", data);\n      // Handle the updated weather data here\n      this.forecasts.push(data);\n    });\n  }\n  ngOnInit() {}\n  ngOnDestroy() {\n    if (this.hubConnection) {\n      this.hubConnection.stop().catch(err => console.error(err));\n    }\n  }\n  addWeatherForecast() {\n    const newForecast = {\n      date: new Date().toISOString(),\n      temperatureC: Math.floor(Math.random() * 100),\n      temperatureF: Math.floor(Math.random() * 100),\n      summary: 'Random Summary' // Set a static summary for demonstration\n    };\n\n    this.http.post(`${this.baseUrl}weatherforecast`, newForecast).subscribe(result => {\n      console.log('Weather forecast added:', result);\n      // You can also update your local forecasts array here if needed.\n    }, error => {\n      console.error('Error adding weather forecast:', error);\n    });\n  }\n}\nFetchDataComponent.ɵfac = function FetchDataComponent_Factory(t) {\n  return new (t || FetchDataComponent)(i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject('BASE_URL'));\n};\nFetchDataComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: FetchDataComponent,\n  selectors: [[\"app-fetch-data\"]],\n  decls: 8,\n  vars: 2,\n  consts: [[\"id\", \"tableLabel\"], [4, \"ngIf\"], [\"class\", \"table table-striped\", \"aria-labelledby\", \"tableLabel\", 4, \"ngIf\"], [3, \"click\"], [\"aria-labelledby\", \"tableLabel\", 1, \"table\", \"table-striped\"], [4, \"ngFor\", \"ngForOf\"]],\n  template: function FetchDataComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h1\", 0);\n      i0.ɵɵtext(1, \"Weather forecast\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"p\");\n      i0.ɵɵtext(3, \"This component demonstrates fetching data from the server.\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(4, FetchDataComponent_p_4_Template, 3, 0, \"p\", 1);\n      i0.ɵɵtemplate(5, FetchDataComponent_table_5_Template, 13, 1, \"table\", 2);\n      i0.ɵɵelementStart(6, \"button\", 3);\n      i0.ɵɵlistener(\"click\", function FetchDataComponent_Template_button_click_6_listener() {\n        return ctx.addWeatherForecast();\n      });\n      i0.ɵɵtext(7, \"Add Weather Forecast\");\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngIf\", !ctx.forecasts);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.forecasts);\n    }\n  },\n  dependencies: [i2.NgForOf, i2.NgIf],\n  encapsulation: 2\n});","map":{"version":3,"mappings":"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","names":["LogLevel","HubConnectionBuilder","i0","FetchDataComponent","constructor","http","baseUrl","get","subscribe","result","forecasts","error","console","hubConnection","withUrl","configureLogging","Information","build","start","then","log","catch","err","on","data","push","ngOnInit","ngOnDestroy","stop","addWeatherForecast","newForecast","date","Date","toISOString","temperatureC","Math","floor","random","temperatureF","summary","post","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\D_Jok\\source\\repos\\MbSample\\MbSample\\ClientApp\\src\\app\\fetch-data\\fetch-data.component.ts","C:\\Users\\D_Jok\\source\\repos\\MbSample\\MbSample\\ClientApp\\src\\app\\fetch-data\\fetch-data.component.html"],"sourcesContent":["import { Component, Inject, OnInit } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { LogLevel, HubConnection, HubConnectionBuilder } from '@microsoft/signalr';\r\n\r\n@Component({\r\n  selector: 'app-fetch-data',\r\n  templateUrl: './fetch-data.component.html'\r\n})\r\nexport class FetchDataComponent implements OnInit { \r\n  public forecasts: WeatherForecast[] = [];\r\n  private hubConnection: HubConnection;\r\n  private baseUrl: string;\r\n  private http: HttpClient;\r\n\r\n  constructor(http: HttpClient, @Inject('BASE_URL') baseUrl: string) {\r\n    this.baseUrl = baseUrl;\r\n    this.http = http;\r\n    http.get<WeatherForecast[]>(baseUrl + 'weatherforecast').subscribe(result => {\r\n      this.forecasts = result;\r\n    }, error => console.error(error));\r\n\r\n    this.hubConnection = new HubConnectionBuilder()\r\n      .withUrl(`https://localhost:7064/weatherhub`)\r\n      .configureLogging(LogLevel.Information)\r\n      .build();\r\n\r\n    this.hubConnection.start().then(() => {\r\n      console.log('Connection started');\r\n    }).catch(err => console.error('Error while starting connection: ' + err));\r\n\r\n    this.hubConnection.on('WeatherUpdated', (data) => {\r\n      console.log(\"Received new weather data:\", data);\r\n      // Handle the updated weather data here\r\n      this.forecasts.push(data)\r\n    });\r\n  }\r\n\r\n  ngOnInit() { \r\n \r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this.hubConnection) {\r\n      this.hubConnection.stop().catch(err => console.error(err));\r\n    }\r\n  }\r\n\r\n  addWeatherForecast() {\r\n    const newForecast: WeatherForecast = {\r\n      date: new Date().toISOString(), // Set to the current date for demonstration\r\n      temperatureC: Math.floor(Math.random() * 100), // Random temperature for demonstration\r\n      temperatureF: Math.floor(Math.random() * 100), // Random temperature for demonstration\r\n      summary: 'Random Summary' // Set a static summary for demonstration\r\n    };\r\n\r\n    this.http.post<WeatherForecast>(`${this.baseUrl}weatherforecast`, newForecast)\r\n      .subscribe(\r\n        result => {\r\n          console.log('Weather forecast added:', result);\r\n          // You can also update your local forecasts array here if needed.\r\n        },\r\n        error => {\r\n          console.error('Error adding weather forecast:', error);\r\n        }\r\n      );\r\n  }\r\n\r\n}\r\n\r\ninterface WeatherForecast {\r\n  date: string;\r\n  temperatureC: number;\r\n  temperatureF: number;\r\n  summary: string;\r\n}\r\n","<h1 id=\"tableLabel\">Weather forecast</h1>\r\n\r\n<p>This component demonstrates fetching data from the server.</p>\r\n\r\n<p *ngIf=\"!forecasts\"><em>Loading...</em></p>\r\n\r\n<table class='table table-striped' aria-labelledby=\"tableLabel\" *ngIf=\"forecasts\">\r\n  <thead>\r\n    <tr>\r\n      <th>Date</th>\r\n      <th>Temp. (C)</th>\r\n      <th>Temp. (F)</th>\r\n      <th>Summary</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr *ngFor=\"let forecast of forecasts\">\r\n      <td>{{ forecast.date }}</td>\r\n      <td>{{ forecast.temperatureC }}</td>\r\n      <td>{{ forecast.temperatureF }}</td>\r\n      <td>{{ forecast.summary }}</td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n\r\n<button (click)=\"addWeatherForecast()\">Add Weather Forecast</button>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}